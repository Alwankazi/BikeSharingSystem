# Generated by Django 2.1.5 on 2019-01-23 18:33

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('home', '0009_auto_20190121_0954'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccStatus',
            fields=[
                ('acc_status_id', models.AutoField(primary_key=True, serialize=False)),
                ('status_name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'acc_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BikeOnReservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'bike_on_reservation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Checkuplog',
            fields=[
                ('clog_id', models.AutoField(primary_key=True, serialize=False)),
                ('clog_count', models.IntegerField()),
                ('checkup_date', models.DateField()),
                ('checkup_desc', models.TextField()),
            ],
            options={
                'db_table': 'checkuplog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Complaints',
            fields=[
                ('complaint_id', models.AutoField(primary_key=True, serialize=False)),
                ('complaint_type', models.CharField(max_length=20)),
                ('complaint_desc', models.TextField()),
            ],
            options={
                'db_table': 'complaints',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Creditcardinfo',
            fields=[
                ('card_id', models.AutoField(primary_key=True, serialize=False)),
                ('card_info', models.IntegerField()),
                ('card_exp_date', models.DateField()),
            ],
            options={
                'db_table': 'creditcardinfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(primary_key=True, serialize=False)),
                ('cfirst_name', models.CharField(max_length=20)),
                ('clast_name', models.CharField(max_length=20)),
                ('c_email', models.CharField(max_length=20)),
                ('c_contact_no', models.IntegerField()),
                ('c_username', models.CharField(max_length=20, unique=True)),
                ('c_password', models.CharField(max_length=20)),
                ('c_acc_creation_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'customer',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerRating',
            fields=[
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('rating_value', models.IntegerField()),
            ],
            options={
                'db_table': 'customer_rating',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentGear',
            fields=[
                ('gear_id', models.AutoField(primary_key=True, serialize=False)),
                ('gear_name', models.CharField(max_length=20)),
                ('gear_cost', models.IntegerField()),
            ],
            options={
                'db_table': 'equipment_gear',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Maintenancelog',
            fields=[
                ('mlog_id', models.AutoField(primary_key=True, serialize=False)),
                ('mlog_count', models.IntegerField()),
                ('maintenance_date', models.DateField()),
                ('maintenance_desc', models.TextField()),
                ('mechanic_name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'maintenancelog',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('manager_id', models.AutoField(primary_key=True, serialize=False)),
                ('mfirst_name', models.CharField(max_length=20)),
                ('mlast_name', models.CharField(max_length=20)),
                ('m_email', models.CharField(max_length=20)),
                ('m_contact_no', models.IntegerField()),
                ('m_username', models.CharField(max_length=20, unique=True)),
                ('m_password', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'manager',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('operator_id', models.AutoField(primary_key=True, serialize=False)),
                ('ofirst_name', models.CharField(max_length=20)),
                ('olast_name', models.CharField(max_length=20)),
                ('o_email', models.CharField(max_length=20)),
                ('o_contact_no', models.IntegerField()),
                ('o_username', models.CharField(max_length=20, unique=True)),
                ('o_password', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'operator',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('reservation_id', models.AutoField(primary_key=True, serialize=False)),
                ('res_cost', models.IntegerField()),
                ('res_date', models.DateTimeField()),
                ('starttime', models.DateTimeField()),
                ('endtime', models.DateTimeField()),
                ('totalduration', models.TimeField()),
            ],
            options={
                'db_table': 'reservation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReservationType',
            fields=[
                ('res_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('res_type_name', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'reservation_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stationfootage',
            fields=[
                ('footage_id', models.AutoField(primary_key=True, serialize=False)),
                ('footage_date', models.CharField(max_length=20)),
                ('footage_link', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'stationfootage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StationOnReservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'station_on_reservation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stationroutes',
            fields=[
                ('route_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'stationroutes',
                'managed': False,
            },
        ),
        migrations.AlterModelOptions(
            name='bike',
            options={'managed': False},
        ),
        migrations.AlterModelOptions(
            name='station',
            options={'managed': False},
        ),
        migrations.AlterModelOptions(
            name='typeofbike',
            options={'managed': False},
        ),
    ]
